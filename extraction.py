import requests
import os
import sys

# üü¢ Extensions √† extraire
TARGET_EXTENSIONS = [".tf", "Dockerfile", ".yaml", ".yml"]
OUTPUT_DIR = "configurations"


def clean_repo_url(repo_url):
    """ Nettoie l'URL du d√©p√¥t GitHub et retourne owner/repo """
    repo_url = repo_url.rstrip("/")
    if repo_url.endswith(".git"):
        repo_url = repo_url[:-4]

    repo_owner, repo_name = repo_url.split("/")[-2:]
    return repo_owner, repo_name


def get_github_files(repo_owner, repo_name, path=""):
    """ R√©cup√®re tous les fichiers d'un d√©p√¥t GitHub r√©cursivement """
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{path}"
    response = requests.get(url)

    if response.status_code == 200:
        return response.json()
    else:
        print(f"‚ö†Ô∏è Erreur ({response.status_code}) : {response.text}")
        return []


def download_file(file_url, output_path):
    """ T√©l√©charge un fichier depuis GitHub """
    response = requests.get(file_url)

    if response.status_code == 200:
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        with open(output_path, "wb") as file:
            file.write(response.content)
        print(f"‚úÖ Fichier t√©l√©charg√© : {output_path}")
    else:
        print(f"‚ö†Ô∏è Impossible de t√©l√©charger {file_url}")


def extract_config_files(repo_url):
    """ T√©l√©charge r√©cursivement les fichiers Terraform, Dockerfile et YAML """
    repo_owner, repo_name = clean_repo_url(repo_url)
    repo_folder = os.path.join(OUTPUT_DIR, repo_name)  # üü¢ Cr√©er un dossier avec le nom du repo
    os.makedirs(repo_folder, exist_ok=True)

    print(f"üì• Extraction des fichiers du d√©p√¥t : {repo_url} dans {repo_folder}")

    def fetch_files_recursive(path=""):
        files = get_github_files(repo_owner, repo_name, path)
        if not files:
            return

        for file in files:
            file_name = file["name"]
            file_path = file["path"]  # Chemin complet dans le repo
            file_url = file.get("download_url")

            if file_url and any(file_name.endswith(ext) or file_name in TARGET_EXTENSIONS for ext in TARGET_EXTENSIONS):
                output_path = os.path.join(repo_folder, file_path)  # üîÑ Placer les fichiers dans le dossier repo
                download_file(file_url, output_path)
            elif file["type"] == "dir":
                fetch_files_recursive(file_path)  # üîÑ R√©cursion dans le dossier

    fetch_files_recursive()  # Lancer la r√©cup√©ration des fichiers


# üü¢ Ex√©cuter l'extraction avec l'URL en argument
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("‚ùå Erreur : Aucun d√©p√¥t GitHub fourni.")
        sys.exit(1)

    repo_url = sys.argv[1]
    extract_config_files(repo_url)
